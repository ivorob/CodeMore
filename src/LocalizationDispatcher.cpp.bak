#include <QCoreApplication>
#include <QDirIterator>
#include <QDebug>

#include "LocalizationDispatcher.h"

namespace {

const char *languagesTranslation[] =
{
    QT_TRANSLATE_NOOP("Languages", "English"),
    QT_TRANSLATE_NOOP("Languages", "Russian"),
    QT_TRANSLATE_NOOP("Languages", "Deutch")
};

}

LocalizationDispatcher::LocalizationDispatcher(const QLocale& locale, QObject *parent)
    : QObject(parent),
      translator(new QTranslator(this))
{
    QString prefix = "CodeMore";
    QString translationDirectory = "translations";
    if (translator->load(locale, prefix, "_", translationDirectory)) {
        QCoreApplication::installTranslator(translator);
    } else {
        qDebug() << "Cannot load translation";
    }

    fillLanguages(prefix, translationDirectory);
}

void
LocalizationDispatcher::fillLanguages(const QString& prefix, const QString& directory)
{
    QStringList languages = {qApp->translate("Languages", "English")};

    QString localizationDirectory = QCoreApplication::applicationDirPath() + "/" + directory;
    QDirIterator it(localizationDirectory, QStringList() << prefix + "_*.qm", QDir::NoFilter);
    while (it.hasNext()) {
        QString path = it.next();

        QRegExp regExp("\\/CodeMore_([a-z]{2}).qm");
        int position = regExp.indexIn(path);
        if (position > -1) {
            QLocale::Language languageCode = QLocale(regExp.cap(1)).language();
            QString language = QLocale::languageToString(languageCode);
            if (!language.isEmpty()) {
                languages << qApp->translate("Languages", language.toUtf8());
            }
        }
    }

    return languages;
}

#include <QDebug>
void
LocalizationDispatcher::translateApp(QTranslator *translator, const QString& languageToTranslate)
{
    QString localizationDirectory = QCoreApplication::applicationDirPath() + "/translations";
    QDirIterator it(localizationDirectory, QStringList() << "CodeMore_*.qm", QDir::NoFilter);
    while (it.hasNext()) {
        QString path = it.next();

        QRegExp regExp("\\/CodeMore_([a-z]{2}).qm");
        int position = regExp.indexIn(path);
        if (position > -1) {
            QLocale::Language languageCode = QLocale(regExp.cap(1)).language();
            QString language = QLocale::languageToString(languageCode);
            qDebug() << language;
            qDebug() << languageToTranslate;
            if (!language.isEmpty() && language ==  languageToTranslate)
            {
                if (translator->load(QLocale(languageCode), "CodeMore", "_", "translations")) {
                    QCoreApplication::installTranslator(translator);
                }
            }
        }
    }
}

QString
LocalizationDispatcher::getCurrentLanguage()
{
    QLocale::Language languageCode = QLocale().language();
    QString currentLanguage = QLocale::languageToString(languageCode);
    return qApp->translate("Languages", currentLanguage.toUtf8());
}*/
